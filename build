#!/bin/bash
# version="0.1"
#
# ARG_OPTIONAL_SINGLE([image-name],[],[name of the docker image to be pushed],[koehn/diaspora])
# ARG_OPTIONAL_SINGLE([git-url],[],[git URL from which to clone the code])
# ARG_OPTIONAL_SINGLE([diaspora-version],[],[version of the diaspora code to compile])
# ARG_OPTIONAL_SINGLE([ruby-version],[],[version of ruby to use])
# ARG_OPTIONAL_SINGLE([gem-version],[],[version of gem to use])
# ARG_HELP([Builds a Docker image of a Diaspora repository and pushes that image to Docker.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_image_name="koehn/diaspora"
_arg_git_url=
_arg_diaspora_version=
_arg_ruby_version=
_arg_gem_version=

print_help ()
{
	printf "%s\n" "Builds a Docker image of a Diaspora repository and pushes that image to Docker."
	printf 'Usage: %s [--image-name <arg>] [--git-url <arg>] [--diaspora-version <arg>] [--ruby-version <arg>] [--gem-version <arg>] [-h|--help]\n' "$0"
	printf "\t%s\n" "--image-name: name of the docker image to be pushed (default: '"koehn/diaspora"')"
	printf "\t%s\n" "--git-url: git URL from which to clone the code (no default)"
	printf "\t%s\n" "--diaspora-version: version of the diaspora code to compile (no default)"
	printf "\t%s\n" "--ruby-version: version of ruby to use (no default)"
	printf "\t%s\n" "--gem-version: version of gem to use (no default)"
	printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--image-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_image_name="$2"
				shift
				;;
			--image-name=*)
				_arg_image_name="${_key##--image-name=}"
				;;
			--git-url)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_git_url="$2"
				shift
				;;
			--git-url=*)
				_arg_git_url="${_key##--git-url=}"
				;;
			--diaspora-version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_diaspora_version="$2"
				shift
				;;
			--diaspora-version=*)
				_arg_diaspora_version="${_key##--diaspora-version=}"
				;;
			--ruby-version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ruby_version="$2"
				shift
				;;
			--ruby-version=*)
				_arg_ruby_version="${_key##--ruby-version=}"
				;;
			--gem-version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_gem_version="$2"
				shift
				;;
			--gem-version=*)
				_arg_gem_version="${_key##--gem-version=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


DOCKER_TAG=latest
IMAGE_NAME=$_arg_image_name

if [[ ! $_arg_git_url ]] ; then BUILD_ARGS="$BUILD_ARGS --build-arg GIT_URL=$_arg_git_url" ; fi
if [[ ! $_arg_diaspora-version ]] ; then DOCKER_TAG=$diaspora_version ; BUILD_ARGS="$BUILD_ARGS --build-arg GIT_BRANCH=v$_arg_diaspora_version" ; fi
if [[ ! $_arg_ruby_version ]] ; then BUILD_ARGS="$BUILD_ARGS --build-arg RUBY_VERSION=$_arg_ruby_version" ; fi
if [[ ! $_arg_gem_version ]] ; then BUILD_ARGS="$BUILD_ARGS --build-arg GEM_VERSION=$_arg_gem_version" ; fi

BUILD_ARGS="$BUILD_ARGS --build-arg DIASPORA_DOCKER_GIT_COMMIT=`git log -1 --format=%h` "

docker build -t $IMAGE_NAME:$DOCKER_TAG $BUILD_ARGS .

docker push $IMAGE_NAME:$DOCKER_TAG

# ] <-- needed because of Argbash
